definitions:
  constants.IdentifierType:
    enum:
    - email
    - username
    - phone
    type: string
    x-enum-varnames:
    - IdentifierEmail
    - IdentifierUsername
    - IdentifierPhone
  dto.AccessSessionDTO:
    properties:
      id:
        type: string
    type: object
  dto.AccountDTO:
    properties:
      api_key:
        description: Nullable
        type: string
      email:
        type: string
      id:
        type: string
      oauth_id:
        description: Nullable
        type: string
      oauth_provider:
        description: Nullable
        type: string
      private_key:
        description: Nullable
        type: string
      public_key:
        description: Nullable
        type: string
      role:
        description: USER, PARTNER, CUSTOMER, VALIDATOR
        type: string
      username:
        type: string
    type: object
  dto.AccountDetailDTO:
    properties:
      account:
        $ref: '#/definitions/dto.AccountDTO'
      company_name:
        type: string
      contact_name:
        type: string
      first_name:
        type: string
      industry:
        type: string
      last_name:
        type: string
      organization_name:
        type: string
      phone_number:
        type: string
      validation_organization:
        type: string
    type: object
  dto.AssignPolicyPayloadDTO:
    properties:
      policy_id:
        type: string
    required:
    - policy_id
    type: object
  dto.CreateAccessPermissionPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.CreateAccessPolicyPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.CreateAccessSessionPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.CreateIdentityGroupPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.CreateIdentityOrganizationPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.CreateIdentityRolePayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.CreateIdentityServicePayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.FileInfoPayloadDTO:
    properties:
      id:
        description: File ID
        type: string
      name:
        description: File name
        type: string
      owner_id:
        description: Owner ID
        type: string
      share_count:
        description: Number of shares
        minimum: 0
        type: integer
    required:
    - id
    - name
    - owner_id
    - share_count
    type: object
  dto.IdentityChallengeWithEmailDTO:
    properties:
      email:
        type: string
      organization_id:
        type: string
    type: object
  dto.IdentityChallengeWithPhoneDTO:
    properties:
      organization_id:
        type: string
      phone:
        type: string
    type: object
  dto.IdentityGroupDTO:
    properties:
      id:
        type: string
    type: object
  dto.IdentityOrganizationDTO:
    properties:
      code:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.IdentityRefreshTokenDTO:
    properties:
      refresh_token:
        type: string
    type: object
  dto.IdentityRoleDTO:
    properties:
      id:
        type: string
    type: object
  dto.IdentityServiceDTO:
    properties:
      id:
        type: string
    type: object
  dto.IdentityUserAuthDTO:
    properties:
      access_expires_at:
        type: string
      access_token:
        type: string
      last_login_at:
        type: string
      refresh_expires_at:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/dto.IdentityUserDTO'
    type: object
  dto.IdentityUserChallengeDTO:
    properties:
      challenge_at:
        type: string
      session_id:
        type: string
    type: object
  dto.IdentityUserDTO:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      full_name:
        type: string
      id:
        type: string
      last_login_at:
        type: string
      last_name:
        type: string
      name:
        type: string
      phone:
        type: string
      status:
        type: boolean
      updated_at:
        type: string
      user_name:
        type: string
    type: object
  dto.IdentityUserLoginDTO:
    properties:
      organization_id:
        type: string
      password:
        type: string
      user_name:
        type: string
    type: object
  dto.LoginPayloadDTO:
    properties:
      identifier:
        description: Identifier (email, username, or phone number)
        type: string
      identifier_type:
        allOf:
        - $ref: '#/definitions/constants.IdentifierType'
        description: 'Type of identifier: "email", "username", or "phone"'
      password:
        description: User password
        type: string
    required:
    - identifier
    - identifier_type
    - password
    type: object
  dto.LogoutPayloadDTO:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.PaginationDTOResponse:
    properties:
      data:
        items: {}
        type: array
      next_page:
        type: integer
      page:
        type: integer
      size:
        type: integer
      total:
        type: integer
    type: object
  dto.PermissionDTO:
    properties:
      action:
        description: The action this permission allows
        type: string
      created_at:
        description: Timestamp of permission creation
        type: string
      description:
        description: Optional description of the permission
        type: string
      id:
        description: Unique ID for the permission
        type: string
      policy_id:
        description: Foreign key referencing IAMPolicy
        type: string
      resource:
        description: The resource this permission applies to
        type: string
      updated_at:
        description: Timestamp of last update
        type: string
    type: object
  dto.PermissionPayloadDTO:
    properties:
      action:
        description: The action the permission allows
        type: string
      description:
        description: Optional description of the permission
        type: string
      policy_id:
        description: Either PolicyID or PolicyName is required
        type: string
      policy_name:
        description: Either PolicyID or PolicyName is required
        type: string
      resource:
        description: The resource the permission applies to
        type: string
    required:
    - action
    - resource
    type: object
  dto.PolicyDTO:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.PolicyPayloadDTO:
    properties:
      description:
        description: Optional description
        type: string
      name:
        description: Name of the policy
        type: string
    required:
    - name
    type: object
  dto.PolicyWithPermissionsDTO:
    properties:
      permissions:
        items:
          $ref: '#/definitions/dto.PermissionDTO'
        type: array
      policy:
        $ref: '#/definitions/dto.PolicyDTO'
    type: object
  dto.RefreshTokenPayloadDTO:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RegisterPayloadDTO:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.RoleDetailsPayloadDTO:
    properties:
      company_name:
        description: Partner fields
        type: string
      contact_name:
        type: string
      first_name:
        description: Common fields
        type: string
      industry:
        type: string
      last_name:
        type: string
      organization_name:
        description: Customer fields
        type: string
      phone_number:
        type: string
      validation_organization:
        description: Validator fields
        type: string
    type: object
  dto.TokenPairDTO:
    properties:
      access_token:
        description: The JWT Access Token
        type: string
      refresh_token:
        description: The plain Refresh Token
        type: string
    type: object
  dto.UpdateAccessPermissionPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.UpdateAccessPolicyPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.UpdateAccessSessionPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.UpdateIdentityGroupPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.UpdateIdentityOrganizationPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.UpdateIdentityRolePayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.UpdateIdentityServicePayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.UpdateRolePayloadDTO:
    properties:
      role:
        description: USER, PARTNER, CUSTOMER, VALIDATOR
        type: string
      role_details:
        allOf:
        - $ref: '#/definitions/dto.RoleDetailsPayloadDTO'
        description: Role-specific details
    required:
    - role
    type: object
  response.ErrorResponse:
    properties:
      code:
        type: string
      errors:
        items: {}
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  response.SuccessResponse:
    properties:
      code:
        type: string
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/v1/account/api-key:
    put:
      consumes:
      - application/json
      description: Generate or update the API key for an account.
      parameters:
      - description: Bearer access token (e.g., 'Bearer <token>')
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: API key updated successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Account not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create or update API key
      tags:
      - account
  /api/v1/account/me:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the details of the currently authenticated
        user using the provided access token.
      parameters:
      - description: Bearer access token (e.g., 'Bearer <token>')
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/dto.AccountDetailDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get current user details
      tags:
      - account
  /api/v1/account/role:
    put:
      consumes:
      - application/json
      description: Update the role of an account and save associated role-specific
        details.
      parameters:
      - description: Bearer access token (e.g., 'Bearer <token>')
        in: header
        name: Authorization
        required: true
        type: string
      - description: Payload containing role and role-specific details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateRolePayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Account role updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Account not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update account role and role-specific details
      tags:
      - account
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: This endpoint authenticates the user by email, username, or phone
        number, and returns an access token and refresh token.
      parameters:
      - description: 'User credentials (identifier, password, and identifier_type
          (e.g: email, username, phone))'
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.LoginPayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 'Login successful: {\"access_token\": \"...\", \"refresh_token\":
            \"...\"}'
          schema:
            $ref: '#/definitions/dto.TokenPairDTO'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Authenticate user
      tags:
      - authentication
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: This endpoint invalidates the refresh token, effectively logging
        the user out.
      parameters:
      - description: Logout payload containing the refresh token
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.LogoutPayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 'Logout successful: {\"success\": true}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Logout user
      tags:
      - authentication
  /api/v1/auth/refresh-tokens:
    post:
      consumes:
      - application/json
      description: This endpoint generates a new pair of access and refresh tokens
        using a valid refresh token.
      parameters:
      - description: Refresh token payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenPayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens refreshed successfully
          schema:
            $ref: '#/definitions/dto.TokenPairDTO'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Refresh tokens
      tags:
      - authentication
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: This endpoint registers a new account and its associated role-specific
        details.
      parameters:
      - description: User registration details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: 'Registration successful: {\"success\": true}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Account already exists
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new account
      tags:
      - authentication
  /api/v1/groups:
    get:
      consumes:
      - application/json
      description: Get groups
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of groups
          schema:
            $ref: '#/definitions/dto.PaginationDTOResponse'
        "400":
          description: Invalid page number or size
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve groups
      tags:
      - groups
    post:
      consumes:
      - application/json
      description: Create a new group
      parameters:
      - description: group payload
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/dto.CreateIdentityGroupPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation of group
          schema:
            $ref: '#/definitions/dto.IdentityGroupDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new group
      tags:
      - groups
  /api/v1/groups/{group_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing group
      parameters:
      - description: group ID
        in: path
        name: group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion of group
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: group not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an existing group
      tags:
      - groups
    get:
      consumes:
      - application/json
      description: Get group by ID
      parameters:
      - description: group ID
        in: path
        name: group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of group
          schema:
            $ref: '#/definitions/dto.IdentityGroupDTO'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: group not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve group by ID
      tags:
      - groups
    put:
      consumes:
      - application/json
      description: Update an existing group
      parameters:
      - description: group ID
        in: path
        name: group_id
        required: true
        type: string
      - description: group payload
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateIdentityGroupPayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update of group
          schema:
            $ref: '#/definitions/dto.IdentityGroupDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: group not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing group
      tags:
      - groups
  /api/v1/iam/accounts/{accountID}/policies:
    post:
      consumes:
      - application/json
      description: Maps a specified policy to an account by accountID.
      parameters:
      - description: Bearer access token (e.g., 'Bearer <token>')
        in: header
        name: Authorization
        required: true
        type: string
      - description: Account ID to assign the policy to
        in: path
        name: accountID
        required: true
        type: string
      - description: Payload containing the policy ID
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.AssignPolicyPayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Policy assigned successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid payload or missing policy
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Account or policy not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Assign a policy to an account
      tags:
      - IAM
  /api/v1/iam/policies:
    get:
      consumes:
      - application/json
      description: Fetches a list of IAM policies along with their associated permissions.
      parameters:
      - description: Bearer access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of policies with permissions
          schema:
            items:
              $ref: '#/definitions/dto.PolicyWithPermissionsDTO'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get policies with permissions
      tags:
      - IAM
    post:
      consumes:
      - application/json
      description: Adds a new IAM policy to the system. Only accessible to Admins.
      parameters:
      - description: Bearer access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Payload for creating policy
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.PolicyPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Policy created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new policy
      tags:
      - IAM
  /api/v1/iam/policies/permissions:
    post:
      consumes:
      - application/json
      description: Adds a new permission to an existing IAM policy.
      parameters:
      - description: Bearer access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Payload for assigning permission
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.PermissionPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Permission assigned successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid payload or missing policy
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Policy not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Permission already exists
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Assign a permission to a policy
      tags:
      - IAM
  /api/v1/identity/challenge-verify:
    post:
      consumes:
      - application/json
      description: Verify the challenge
      parameters:
      - description: session_id
        in: path
        name: session_id
        required: true
        type: string
      - description: code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful verify the challenge
          schema:
            $ref: '#/definitions/dto.IdentityUserAuthDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Verify the challenge
      tags:
      - users
  /api/v1/identity/challenge-with-email:
    post:
      consumes:
      - application/json
      description: Login with email and otp
      parameters:
      - description: challenge payload
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityChallengeWithEmailDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful make a challenge with Email and OTP
          schema:
            $ref: '#/definitions/dto.IdentityUserChallengeDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login with email and otp
      tags:
      - users
  /api/v1/identity/challenge-with-phone:
    post:
      consumes:
      - application/json
      description: Login with phone and otp
      parameters:
      - description: challenge payload
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityChallengeWithPhoneDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful make a challenge with Phone and OTP
          schema:
            $ref: '#/definitions/dto.IdentityUserChallengeDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login with phone and otp
      tags:
      - users
  /api/v1/identity/login:
    post:
      consumes:
      - application/json
      description: Authenticate user
      parameters:
      - description: login payload
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityUserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful authenticate user
          schema:
            $ref: '#/definitions/dto.IdentityUserAuthDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Authenticate user
      tags:
      - users
  /api/v1/identity/login-with-apple:
    post:
      consumes:
      - application/json
      description: Authenticate user with Apple
      produces:
      - application/json
      responses:
        "200":
          description: Successful authenticate user with Apple
          schema:
            $ref: '#/definitions/dto.IdentityUserAuthDTO'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Authenticate user with Apple
      tags:
      - users
  /api/v1/identity/login-with-facebook:
    post:
      consumes:
      - application/json
      description: Authenticate user with Facebook
      produces:
      - application/json
      responses:
        "200":
          description: Successful authenticate user with Facebook
          schema:
            $ref: '#/definitions/dto.IdentityUserAuthDTO'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Authenticate user with Facebook
      tags:
      - users
  /api/v1/identity/login-with-google:
    post:
      consumes:
      - application/json
      description: Authenticate user with Google
      produces:
      - application/json
      responses:
        "200":
          description: Successful authenticate user with Google
          schema:
            $ref: '#/definitions/dto.IdentityUserAuthDTO'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Authenticate user with Google
      tags:
      - users
  /api/v1/identity/logout:
    post:
      consumes:
      - application/json
      description: De-authenticate user
      produces:
      - application/json
      responses:
        "200":
          description: Successful de-authenticate user
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: De-authenticate user
      tags:
      - users
  /api/v1/identity/me:
    get:
      consumes:
      - application/json
      description: Get user profile
      produces:
      - application/json
      responses:
        "200":
          description: Successful get user profile
          schema:
            $ref: '#/definitions/dto.IdentityUserDTO'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get user profile
      tags:
      - users
  /api/v1/identity/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh token
      parameters:
      - description: refresh token payload
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityRefreshTokenDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful refresh token
          schema:
            $ref: '#/definitions/dto.IdentityUserAuthDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Refresh token
      tags:
      - users
  /api/v1/notifications/data-upload:
    post:
      consumes:
      - application/json
      description: This webhook receives raw payload data when a user successfully
        uploads data.
      parameters:
      - description: Bearer access token (e.g., 'Bearer <token>')
        in: header
        name: Authorization
        required: true
        type: string
      - description: Payload containing file information
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.FileInfoPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Notification received successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Notify about successful data upload
      tags:
      - notifications
  /api/v1/organizations:
    get:
      consumes:
      - application/json
      description: Get organizations
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of organizations
          schema:
            $ref: '#/definitions/dto.PaginationDTOResponse'
        "400":
          description: Invalid page number or size
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve organizations
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Create a new organization
      parameters:
      - description: organization payload
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/dto.CreateIdentityOrganizationPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation of organization
          schema:
            $ref: '#/definitions/dto.IdentityOrganizationDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new organization
      tags:
      - organizations
  /api/v1/organizations/{organization_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing organization
      parameters:
      - description: organization ID
        in: path
        name: organization_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion of organization
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an existing organization
      tags:
      - organizations
    get:
      consumes:
      - application/json
      description: Get organization by ID
      parameters:
      - description: organization ID
        in: path
        name: organization_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of organization
          schema:
            $ref: '#/definitions/dto.IdentityOrganizationDTO'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve organization by ID
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: Update an existing organization
      parameters:
      - description: organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: organization payload
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateIdentityOrganizationPayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update of organization
          schema:
            $ref: '#/definitions/dto.IdentityOrganizationDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing organization
      tags:
      - organizations
  /api/v1/permissions:
    get:
      consumes:
      - application/json
      description: Get permissions
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of permissions
          schema:
            $ref: '#/definitions/dto.PaginationDTOResponse'
        "400":
          description: Invalid page number or size
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve permissions
      tags:
      - permissions
    post:
      consumes:
      - application/json
      description: Create a new permission
      parameters:
      - description: permission payload
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAccessPermissionPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation of permission
          schema:
            $ref: '#/definitions/dto.PermissionDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new permission
      tags:
      - permissions
  /api/v1/permissions/{permission_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing permission
      parameters:
      - description: permission ID
        in: path
        name: permission_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion of permission
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: permission not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an existing permission
      tags:
      - permissions
    get:
      consumes:
      - application/json
      description: Get permission by ID
      parameters:
      - description: permission ID
        in: path
        name: permission_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of permission
          schema:
            $ref: '#/definitions/dto.PermissionDTO'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: permission not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve permission by ID
      tags:
      - permissions
    put:
      consumes:
      - application/json
      description: Update an existing permission
      parameters:
      - description: permission ID
        in: path
        name: permission_id
        required: true
        type: string
      - description: permission payload
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAccessPermissionPayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update of permission
          schema:
            $ref: '#/definitions/dto.PermissionDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: permission not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing permission
      tags:
      - permissions
  /api/v1/policies:
    get:
      consumes:
      - application/json
      description: Get policies
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of policies
          schema:
            $ref: '#/definitions/dto.PaginationDTOResponse'
        "400":
          description: Invalid page number or size
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve policies
      tags:
      - policies
    post:
      consumes:
      - application/json
      description: Create a new policy
      parameters:
      - description: policy payload
        in: body
        name: policy
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAccessPolicyPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation of policy
          schema:
            $ref: '#/definitions/dto.PolicyDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new policy
      tags:
      - policies
  /api/v1/policies/{policy_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing policy
      parameters:
      - description: policy ID
        in: path
        name: policy_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion of policy
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: policy not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an existing policy
      tags:
      - policies
    get:
      consumes:
      - application/json
      description: Get policy by ID
      parameters:
      - description: policy ID
        in: path
        name: policy_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of policy
          schema:
            $ref: '#/definitions/dto.PolicyDTO'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: policy not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve policy by ID
      tags:
      - policies
    put:
      consumes:
      - application/json
      description: Update an existing policy
      parameters:
      - description: policy ID
        in: path
        name: policy_id
        required: true
        type: string
      - description: policy payload
        in: body
        name: policy
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAccessPolicyPayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update of policy
          schema:
            $ref: '#/definitions/dto.PolicyDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: policy not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing policy
      tags:
      - policies
  /api/v1/roles:
    get:
      consumes:
      - application/json
      description: Get roles
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of roles
          schema:
            $ref: '#/definitions/dto.PaginationDTOResponse'
        "400":
          description: Invalid page number or size
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role
      parameters:
      - description: role payload
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.CreateIdentityRolePayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation of role
          schema:
            $ref: '#/definitions/dto.IdentityRoleDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new role
      tags:
      - roles
  /api/v1/roles/{role_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing role
      parameters:
      - description: role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion of role
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: role not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an existing role
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Get role by ID
      parameters:
      - description: role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of role
          schema:
            $ref: '#/definitions/dto.IdentityRoleDTO'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: role not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve role by ID
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update an existing role
      parameters:
      - description: role ID
        in: path
        name: role_id
        required: true
        type: string
      - description: role payload
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateIdentityRolePayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update of role
          schema:
            $ref: '#/definitions/dto.IdentityRoleDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: role not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing role
      tags:
      - roles
  /api/v1/services:
    get:
      consumes:
      - application/json
      description: Get services
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of services
          schema:
            $ref: '#/definitions/dto.PaginationDTOResponse'
        "400":
          description: Invalid page number or size
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve services
      tags:
      - services
    post:
      consumes:
      - application/json
      description: Create a new service
      parameters:
      - description: service payload
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/dto.CreateIdentityServicePayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation of service
          schema:
            $ref: '#/definitions/dto.IdentityServiceDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new service
      tags:
      - services
  /api/v1/services/{service_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing service
      parameters:
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion of service
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: service not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an existing service
      tags:
      - services
    get:
      consumes:
      - application/json
      description: Get service by ID
      parameters:
      - description: service ID
        in: path
        name: service_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of service
          schema:
            $ref: '#/definitions/dto.IdentityServiceDTO'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: service not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve service by ID
      tags:
      - services
    put:
      consumes:
      - application/json
      description: Update an existing service
      parameters:
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: string
      - description: service payload
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateIdentityServicePayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update of service
          schema:
            $ref: '#/definitions/dto.IdentityServiceDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: service not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing service
      tags:
      - services
  /api/v1/sessions:
    get:
      consumes:
      - application/json
      description: Get sessions
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of sessions
          schema:
            $ref: '#/definitions/dto.PaginationDTOResponse'
        "400":
          description: Invalid page number or size
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve sessions
      tags:
      - sessions
    post:
      consumes:
      - application/json
      description: Create a new session
      parameters:
      - description: session payload
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAccessSessionPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation of session
          schema:
            $ref: '#/definitions/dto.AccessSessionDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new session
      tags:
      - sessions
  /api/v1/sessions/{session_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing session
      parameters:
      - description: session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion of session
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: session not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an existing session
      tags:
      - sessions
    get:
      consumes:
      - application/json
      description: Get session by ID
      parameters:
      - description: session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of session
          schema:
            $ref: '#/definitions/dto.AccessSessionDTO'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: session not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve session by ID
      tags:
      - sessions
    put:
      consumes:
      - application/json
      description: Update an existing session
      parameters:
      - description: session ID
        in: path
        name: session_id
        required: true
        type: string
      - description: session payload
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAccessSessionPayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update of session
          schema:
            $ref: '#/definitions/dto.AccessSessionDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: session not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing session
      tags:
      - sessions
  /api/v1/validators/active:
    get:
      consumes:
      - application/json
      description: Fetches a list of active validators. Optionally, a comma-separated
        list of validator IDs can be provided to filter the results.
      parameters:
      - description: Bearer access token (e.g., 'Bearer <token>')
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comma-separated list of validator IDs to filter results (e.g.,
          'id1,id2,id3')
        in: query
        name: validator_ids
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of active validators
          schema:
            items:
              $ref: '#/definitions/dto.AccountDetailDTO'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Active Validators
      tags:
      - validators
swagger: "2.0"
