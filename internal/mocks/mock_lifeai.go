// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/adapters/services/lifeai.go
//
// Generated by this command:
//
//	mockgen -source=./internal/adapters/services/lifeai.go -package=mocks -destination=mocks/mock_lifeai.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	services "github.com/lifenetwork-ai/iam-service/internal/adapters/services/types"
	gomock "go.uber.org/mock/gomock"
)

// MockLifeAIService is a mock of LifeAIService interface.
type MockLifeAIService struct {
	ctrl     *gomock.Controller
	recorder *MockLifeAIServiceMockRecorder
	isgomock struct{}
}

// MockLifeAIServiceMockRecorder is the mock recorder for MockLifeAIService.
type MockLifeAIServiceMockRecorder struct {
	mock *MockLifeAIService
}

// NewMockLifeAIService creates a new mock instance.
func NewMockLifeAIService(ctrl *gomock.Controller) *MockLifeAIService {
	mock := &MockLifeAIService{ctrl: ctrl}
	mock.recorder = &MockLifeAIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLifeAIService) EXPECT() *MockLifeAIServiceMockRecorder {
	return m.recorder
}

// GetProfile mocks base method.
func (m *MockLifeAIService) GetProfile(ctx context.Context, authHeader string) (*services.LifeAIProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, authHeader)
	ret0, _ := ret[0].(*services.LifeAIProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockLifeAIServiceMockRecorder) GetProfile(ctx, authHeader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockLifeAIService)(nil).GetProfile), ctx, authHeader)
}
