// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/adapters/services/kratos/service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/adapters/services/kratos/service.go -package=mock_kratos -destination=mocks/adapters/services/kratos/mock_service.go
//

// Package mock_kratos is a generated GoMock package.
package mock_kratos

import (
	context "context"
	reflect "reflect"

	client "github.com/ory/kratos-client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateLoginFlow mocks base method.
func (m *MockService) CreateLoginFlow(ctx context.Context) (*client.LoginFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoginFlow", ctx)
	ret0, _ := ret[0].(*client.LoginFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoginFlow indicates an expected call of CreateLoginFlow.
func (mr *MockServiceMockRecorder) CreateLoginFlow(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoginFlow", reflect.TypeOf((*MockService)(nil).CreateLoginFlow), ctx)
}

// CreateRegistrationFlow mocks base method.
func (m *MockService) CreateRegistrationFlow(ctx context.Context) (*client.RegistrationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationFlow", ctx)
	ret0, _ := ret[0].(*client.RegistrationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationFlow indicates an expected call of CreateRegistrationFlow.
func (mr *MockServiceMockRecorder) CreateRegistrationFlow(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationFlow", reflect.TypeOf((*MockService)(nil).CreateRegistrationFlow), ctx)
}

// CreateVerificationFlow mocks base method.
func (m *MockService) CreateVerificationFlow(ctx context.Context) (*client.VerificationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerificationFlow", ctx)
	ret0, _ := ret[0].(*client.VerificationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerificationFlow indicates an expected call of CreateVerificationFlow.
func (mr *MockServiceMockRecorder) CreateVerificationFlow(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerificationFlow", reflect.TypeOf((*MockService)(nil).CreateVerificationFlow), ctx)
}

// UpdateLoginFlow mocks base method.
func (m *MockService) UpdateLoginFlow(ctx context.Context, flow string, body client.UpdateLoginFlowBody) (*client.SuccessfulNativeLogin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoginFlow", ctx, flow, body)
	ret0, _ := ret[0].(*client.SuccessfulNativeLogin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoginFlow indicates an expected call of UpdateLoginFlow.
func (mr *MockServiceMockRecorder) UpdateLoginFlow(ctx, flow, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoginFlow", reflect.TypeOf((*MockService)(nil).UpdateLoginFlow), ctx, flow, body)
}

// UpdateRegistrationFlow mocks base method.
func (m *MockService) UpdateRegistrationFlow(ctx context.Context, flow string, body client.UpdateRegistrationFlowBody) (*client.SuccessfulNativeRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegistrationFlow", ctx, flow, body)
	ret0, _ := ret[0].(*client.SuccessfulNativeRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegistrationFlow indicates an expected call of UpdateRegistrationFlow.
func (mr *MockServiceMockRecorder) UpdateRegistrationFlow(ctx, flow, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistrationFlow", reflect.TypeOf((*MockService)(nil).UpdateRegistrationFlow), ctx, flow, body)
}

// UpdateVerificationFlow mocks base method.
func (m *MockService) UpdateVerificationFlow(ctx context.Context, flow string, body client.UpdateVerificationFlowBody) (*client.VerificationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerificationFlow", ctx, flow, body)
	ret0, _ := ret[0].(*client.VerificationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerificationFlow indicates an expected call of UpdateVerificationFlow.
func (mr *MockServiceMockRecorder) UpdateVerificationFlow(ctx, flow, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerificationFlow", reflect.TypeOf((*MockService)(nil).UpdateVerificationFlow), ctx, flow, body)
}
