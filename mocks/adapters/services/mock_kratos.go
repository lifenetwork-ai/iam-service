// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/adapters/services/kratos.go
//
// Generated by this command:
//
//	mockgen -source=./internal/adapters/services/kratos.go -package=mock_services -destination=mocks/adapters/services/mock_kratos.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	client "github.com/ory/kratos-client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockKratosService is a mock of KratosService interface.
type MockKratosService struct {
	ctrl     *gomock.Controller
	recorder *MockKratosServiceMockRecorder
	isgomock struct{}
}

// MockKratosServiceMockRecorder is the mock recorder for MockKratosService.
type MockKratosServiceMockRecorder struct {
	mock *MockKratosService
}

// NewMockKratosService creates a new mock instance.
func NewMockKratosService(ctrl *gomock.Controller) *MockKratosService {
	mock := &MockKratosService{ctrl: ctrl}
	mock.recorder = &MockKratosServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKratosService) EXPECT() *MockKratosServiceMockRecorder {
	return m.recorder
}

// GetLoginFlow mocks base method.
func (m *MockKratosService) GetLoginFlow(ctx context.Context, flowID string) (*client.LoginFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginFlow", ctx, flowID)
	ret0, _ := ret[0].(*client.LoginFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginFlow indicates an expected call of GetLoginFlow.
func (mr *MockKratosServiceMockRecorder) GetLoginFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginFlow", reflect.TypeOf((*MockKratosService)(nil).GetLoginFlow), ctx, flowID)
}

// GetRegistrationFlow mocks base method.
func (m *MockKratosService) GetRegistrationFlow(ctx context.Context, flowID string) (*client.RegistrationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistrationFlow", ctx, flowID)
	ret0, _ := ret[0].(*client.RegistrationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistrationFlow indicates an expected call of GetRegistrationFlow.
func (mr *MockKratosServiceMockRecorder) GetRegistrationFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistrationFlow", reflect.TypeOf((*MockKratosService)(nil).GetRegistrationFlow), ctx, flowID)
}

// GetSession mocks base method.
func (m *MockKratosService) GetSession(ctx context.Context, sessionToken string) (*client.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, sessionToken)
	ret0, _ := ret[0].(*client.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockKratosServiceMockRecorder) GetSession(ctx, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockKratosService)(nil).GetSession), ctx, sessionToken)
}

// GetVerificationFlow mocks base method.
func (m *MockKratosService) GetVerificationFlow(ctx context.Context, flowID string) (*client.VerificationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationFlow", ctx, flowID)
	ret0, _ := ret[0].(*client.VerificationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationFlow indicates an expected call of GetVerificationFlow.
func (mr *MockKratosServiceMockRecorder) GetVerificationFlow(ctx, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationFlow", reflect.TypeOf((*MockKratosService)(nil).GetVerificationFlow), ctx, flowID)
}

// InitializeLoginFlow mocks base method.
func (m *MockKratosService) InitializeLoginFlow(ctx context.Context) (*client.LoginFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeLoginFlow", ctx)
	ret0, _ := ret[0].(*client.LoginFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeLoginFlow indicates an expected call of InitializeLoginFlow.
func (mr *MockKratosServiceMockRecorder) InitializeLoginFlow(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeLoginFlow", reflect.TypeOf((*MockKratosService)(nil).InitializeLoginFlow), ctx)
}

// InitializeRegistrationFlow mocks base method.
func (m *MockKratosService) InitializeRegistrationFlow(ctx context.Context) (*client.RegistrationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeRegistrationFlow", ctx)
	ret0, _ := ret[0].(*client.RegistrationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeRegistrationFlow indicates an expected call of InitializeRegistrationFlow.
func (mr *MockKratosServiceMockRecorder) InitializeRegistrationFlow(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeRegistrationFlow", reflect.TypeOf((*MockKratosService)(nil).InitializeRegistrationFlow), ctx)
}

// InitializeVerificationFlow mocks base method.
func (m *MockKratosService) InitializeVerificationFlow(ctx context.Context) (*client.VerificationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeVerificationFlow", ctx)
	ret0, _ := ret[0].(*client.VerificationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeVerificationFlow indicates an expected call of InitializeVerificationFlow.
func (mr *MockKratosServiceMockRecorder) InitializeVerificationFlow(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeVerificationFlow", reflect.TypeOf((*MockKratosService)(nil).InitializeVerificationFlow), ctx)
}

// Logout mocks base method.
func (m *MockKratosService) Logout(ctx context.Context, sessionToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, sessionToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockKratosServiceMockRecorder) Logout(ctx, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockKratosService)(nil).Logout), ctx, sessionToken)
}

// RevokeSession mocks base method.
func (m *MockKratosService) RevokeSession(ctx context.Context, sessionToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSession", ctx, sessionToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSession indicates an expected call of RevokeSession.
func (mr *MockKratosServiceMockRecorder) RevokeSession(ctx, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSession", reflect.TypeOf((*MockKratosService)(nil).RevokeSession), ctx, sessionToken)
}

// SubmitLoginFlow mocks base method.
func (m *MockKratosService) SubmitLoginFlow(ctx context.Context, flow *client.LoginFlow, method string, identifier, password, code *string) (*client.SuccessfulNativeLogin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitLoginFlow", ctx, flow, method, identifier, password, code)
	ret0, _ := ret[0].(*client.SuccessfulNativeLogin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitLoginFlow indicates an expected call of SubmitLoginFlow.
func (mr *MockKratosServiceMockRecorder) SubmitLoginFlow(ctx, flow, method, identifier, password, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitLoginFlow", reflect.TypeOf((*MockKratosService)(nil).SubmitLoginFlow), ctx, flow, method, identifier, password, code)
}

// SubmitRegistrationFlow mocks base method.
func (m *MockKratosService) SubmitRegistrationFlow(ctx context.Context, flow *client.RegistrationFlow, method string, traits map[string]any) (*client.SuccessfulNativeRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitRegistrationFlow", ctx, flow, method, traits)
	ret0, _ := ret[0].(*client.SuccessfulNativeRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitRegistrationFlow indicates an expected call of SubmitRegistrationFlow.
func (mr *MockKratosServiceMockRecorder) SubmitRegistrationFlow(ctx, flow, method, traits any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitRegistrationFlow", reflect.TypeOf((*MockKratosService)(nil).SubmitRegistrationFlow), ctx, flow, method, traits)
}

// SubmitRegistrationFlowWithCode mocks base method.
func (m *MockKratosService) SubmitRegistrationFlowWithCode(ctx context.Context, flow *client.RegistrationFlow, code string) (*client.SuccessfulNativeRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitRegistrationFlowWithCode", ctx, flow, code)
	ret0, _ := ret[0].(*client.SuccessfulNativeRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitRegistrationFlowWithCode indicates an expected call of SubmitRegistrationFlowWithCode.
func (mr *MockKratosServiceMockRecorder) SubmitRegistrationFlowWithCode(ctx, flow, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitRegistrationFlowWithCode", reflect.TypeOf((*MockKratosService)(nil).SubmitRegistrationFlowWithCode), ctx, flow, code)
}

// SubmitVerificationFlow mocks base method.
func (m *MockKratosService) SubmitVerificationFlow(ctx context.Context, flow *client.VerificationFlow, code string) (*client.VerificationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitVerificationFlow", ctx, flow, code)
	ret0, _ := ret[0].(*client.VerificationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitVerificationFlow indicates an expected call of SubmitVerificationFlow.
func (mr *MockKratosServiceMockRecorder) SubmitVerificationFlow(ctx, flow, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitVerificationFlow", reflect.TypeOf((*MockKratosService)(nil).SubmitVerificationFlow), ctx, flow, code)
}

// WhoAmI mocks base method.
func (m *MockKratosService) WhoAmI(ctx context.Context, sessionToken string) (*client.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhoAmI", ctx, sessionToken)
	ret0, _ := ret[0].(*client.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhoAmI indicates an expected call of WhoAmI.
func (mr *MockKratosServiceMockRecorder) WhoAmI(ctx, sessionToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoAmI", reflect.TypeOf((*MockKratosService)(nil).WhoAmI), ctx, sessionToken)
}
