// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/adapters/repositories/types/access_policy.go
//
// Generated by this command:
//
//	mockgen -source=./internal/adapters/repositories/types/access_policy.go -package=mocks -destination=internal/mocks/mock_internal_adapters_repositories_types_access_policy.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/lifenetwork-ai/iam-service/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockAccessPolicyRepository is a mock of AccessPolicyRepository interface.
type MockAccessPolicyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPolicyRepositoryMockRecorder
	isgomock struct{}
}

// MockAccessPolicyRepositoryMockRecorder is the mock recorder for MockAccessPolicyRepository.
type MockAccessPolicyRepositoryMockRecorder struct {
	mock *MockAccessPolicyRepository
}

// NewMockAccessPolicyRepository creates a new mock instance.
func NewMockAccessPolicyRepository(ctrl *gomock.Controller) *MockAccessPolicyRepository {
	mock := &MockAccessPolicyRepository{ctrl: ctrl}
	mock.recorder = &MockAccessPolicyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPolicyRepository) EXPECT() *MockAccessPolicyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccessPolicyRepository) Create(ctx context.Context, entity domain.AccessPolicy) (*domain.AccessPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, entity)
	ret0, _ := ret[0].(*domain.AccessPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccessPolicyRepositoryMockRecorder) Create(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccessPolicyRepository)(nil).Create), ctx, entity)
}

// Delete mocks base method.
func (m *MockAccessPolicyRepository) Delete(ctx context.Context, id string) (*domain.AccessPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*domain.AccessPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAccessPolicyRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccessPolicyRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockAccessPolicyRepository) Get(ctx context.Context, limit, offset int, keyword string) ([]domain.AccessPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, limit, offset, keyword)
	ret0, _ := ret[0].([]domain.AccessPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccessPolicyRepositoryMockRecorder) Get(ctx, limit, offset, keyword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccessPolicyRepository)(nil).Get), ctx, limit, offset, keyword)
}

// GetByCode mocks base method.
func (m *MockAccessPolicyRepository) GetByCode(ctx context.Context, code string) (*domain.AccessPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCode", ctx, code)
	ret0, _ := ret[0].(*domain.AccessPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCode indicates an expected call of GetByCode.
func (mr *MockAccessPolicyRepositoryMockRecorder) GetByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCode", reflect.TypeOf((*MockAccessPolicyRepository)(nil).GetByCode), ctx, code)
}

// GetByID mocks base method.
func (m *MockAccessPolicyRepository) GetByID(ctx context.Context, id string) (*domain.AccessPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.AccessPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAccessPolicyRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAccessPolicyRepository)(nil).GetByID), ctx, id)
}

// SoftDelete mocks base method.
func (m *MockAccessPolicyRepository) SoftDelete(ctx context.Context, id string) (*domain.AccessPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", ctx, id)
	ret0, _ := ret[0].(*domain.AccessPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockAccessPolicyRepositoryMockRecorder) SoftDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockAccessPolicyRepository)(nil).SoftDelete), ctx, id)
}

// Update mocks base method.
func (m *MockAccessPolicyRepository) Update(ctx context.Context, entity domain.AccessPolicy) (*domain.AccessPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(*domain.AccessPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAccessPolicyRepositoryMockRecorder) Update(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccessPolicyRepository)(nil).Update), ctx, entity)
}
