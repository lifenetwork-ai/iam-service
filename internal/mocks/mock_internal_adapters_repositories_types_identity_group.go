// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/adapters/repositories/types/identity_group.go
//
// Generated by this command:
//
//	mockgen -source=./internal/adapters/repositories/types/identity_group.go -package=mocks -destination=internal/mocks/mock_internal_adapters_repositories_types_identity_group.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/lifenetwork-ai/iam-service/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockIdentityGroupRepository is a mock of IdentityGroupRepository interface.
type MockIdentityGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityGroupRepositoryMockRecorder
	isgomock struct{}
}

// MockIdentityGroupRepositoryMockRecorder is the mock recorder for MockIdentityGroupRepository.
type MockIdentityGroupRepositoryMockRecorder struct {
	mock *MockIdentityGroupRepository
}

// NewMockIdentityGroupRepository creates a new mock instance.
func NewMockIdentityGroupRepository(ctrl *gomock.Controller) *MockIdentityGroupRepository {
	mock := &MockIdentityGroupRepository{ctrl: ctrl}
	mock.recorder = &MockIdentityGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityGroupRepository) EXPECT() *MockIdentityGroupRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIdentityGroupRepository) Create(ctx context.Context, entity domain.IdentityGroup) (*domain.IdentityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, entity)
	ret0, _ := ret[0].(*domain.IdentityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIdentityGroupRepositoryMockRecorder) Create(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIdentityGroupRepository)(nil).Create), ctx, entity)
}

// Delete mocks base method.
func (m *MockIdentityGroupRepository) Delete(ctx context.Context, id string) (*domain.IdentityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*domain.IdentityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIdentityGroupRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIdentityGroupRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockIdentityGroupRepository) Get(ctx context.Context, limit, offset int, keyword string) ([]domain.IdentityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, limit, offset, keyword)
	ret0, _ := ret[0].([]domain.IdentityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIdentityGroupRepositoryMockRecorder) Get(ctx, limit, offset, keyword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIdentityGroupRepository)(nil).Get), ctx, limit, offset, keyword)
}

// GetByCode mocks base method.
func (m *MockIdentityGroupRepository) GetByCode(ctx context.Context, code string) (*domain.IdentityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCode", ctx, code)
	ret0, _ := ret[0].(*domain.IdentityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCode indicates an expected call of GetByCode.
func (mr *MockIdentityGroupRepositoryMockRecorder) GetByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCode", reflect.TypeOf((*MockIdentityGroupRepository)(nil).GetByCode), ctx, code)
}

// GetByID mocks base method.
func (m *MockIdentityGroupRepository) GetByID(ctx context.Context, id string) (*domain.IdentityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.IdentityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIdentityGroupRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIdentityGroupRepository)(nil).GetByID), ctx, id)
}

// SoftDelete mocks base method.
func (m *MockIdentityGroupRepository) SoftDelete(ctx context.Context, id string) (*domain.IdentityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", ctx, id)
	ret0, _ := ret[0].(*domain.IdentityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockIdentityGroupRepositoryMockRecorder) SoftDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockIdentityGroupRepository)(nil).SoftDelete), ctx, id)
}

// Update mocks base method.
func (m *MockIdentityGroupRepository) Update(ctx context.Context, entity domain.IdentityGroup) (*domain.IdentityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(*domain.IdentityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIdentityGroupRepositoryMockRecorder) Update(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIdentityGroupRepository)(nil).Update), ctx, entity)
}
