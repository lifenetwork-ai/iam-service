// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/adapters/repositories/types/access_session.go
//
// Generated by this command:
//
//	mockgen -source=./internal/adapters/repositories/types/access_session.go -package=mocks -destination=internal/mocks/mock_internal_adapters_repositories_types_access_session.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/lifenetwork-ai/iam-service/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockAccessSessionRepository is a mock of AccessSessionRepository interface.
type MockAccessSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccessSessionRepositoryMockRecorder
	isgomock struct{}
}

// MockAccessSessionRepositoryMockRecorder is the mock recorder for MockAccessSessionRepository.
type MockAccessSessionRepositoryMockRecorder struct {
	mock *MockAccessSessionRepository
}

// NewMockAccessSessionRepository creates a new mock instance.
func NewMockAccessSessionRepository(ctrl *gomock.Controller) *MockAccessSessionRepository {
	mock := &MockAccessSessionRepository{ctrl: ctrl}
	mock.recorder = &MockAccessSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessSessionRepository) EXPECT() *MockAccessSessionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccessSessionRepository) Create(ctx context.Context, entity *domain.AccessSession) (*domain.AccessSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, entity)
	ret0, _ := ret[0].(*domain.AccessSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccessSessionRepositoryMockRecorder) Create(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccessSessionRepository)(nil).Create), ctx, entity)
}

// Delete mocks base method.
func (m *MockAccessSessionRepository) Delete(ctx context.Context, id string) (*domain.AccessSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*domain.AccessSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAccessSessionRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccessSessionRepository)(nil).Delete), ctx, id)
}

// FindByAccessToken mocks base method.
func (m *MockAccessSessionRepository) FindByAccessToken(ctx context.Context, accessToken string) (*domain.AccessSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccessToken", ctx, accessToken)
	ret0, _ := ret[0].(*domain.AccessSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccessToken indicates an expected call of FindByAccessToken.
func (mr *MockAccessSessionRepositoryMockRecorder) FindByAccessToken(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccessToken", reflect.TypeOf((*MockAccessSessionRepository)(nil).FindByAccessToken), ctx, accessToken)
}

// FindByID mocks base method.
func (m *MockAccessSessionRepository) FindByID(ctx context.Context, id string) (*domain.AccessSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*domain.AccessSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAccessSessionRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAccessSessionRepository)(nil).FindByID), ctx, id)
}

// FindByRefreshToken mocks base method.
func (m *MockAccessSessionRepository) FindByRefreshToken(ctx context.Context, refreshToken string) (*domain.AccessSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(*domain.AccessSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRefreshToken indicates an expected call of FindByRefreshToken.
func (mr *MockAccessSessionRepositoryMockRecorder) FindByRefreshToken(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRefreshToken", reflect.TypeOf((*MockAccessSessionRepository)(nil).FindByRefreshToken), ctx, refreshToken)
}

// Get mocks base method.
func (m *MockAccessSessionRepository) Get(ctx context.Context, limit, offset int, keyword string) ([]domain.AccessSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, limit, offset, keyword)
	ret0, _ := ret[0].([]domain.AccessSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccessSessionRepositoryMockRecorder) Get(ctx, limit, offset, keyword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccessSessionRepository)(nil).Get), ctx, limit, offset, keyword)
}

// SoftDelete mocks base method.
func (m *MockAccessSessionRepository) SoftDelete(ctx context.Context, id string) (*domain.AccessSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", ctx, id)
	ret0, _ := ret[0].(*domain.AccessSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockAccessSessionRepositoryMockRecorder) SoftDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockAccessSessionRepository)(nil).SoftDelete), ctx, id)
}

// Update mocks base method.
func (m *MockAccessSessionRepository) Update(ctx context.Context, entity *domain.AccessSession) (*domain.AccessSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(*domain.AccessSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAccessSessionRepositoryMockRecorder) Update(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccessSessionRepository)(nil).Update), ctx, entity)
}
