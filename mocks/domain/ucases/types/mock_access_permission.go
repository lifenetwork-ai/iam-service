// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/ucases/types/access_permission.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/ucases/types/access_permission.go -package=mock_types -destination=mocks/domain/ucases/types/mock_access_permission.go
//

// Package mock_types is a generated GoMock package.
package mock_types

import (
	context "context"
	reflect "reflect"

	dto "github.com/lifenetwork-ai/iam-service/internal/delivery/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockAccessPermissionUseCase is a mock of AccessPermissionUseCase interface.
type MockAccessPermissionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPermissionUseCaseMockRecorder
	isgomock struct{}
}

// MockAccessPermissionUseCaseMockRecorder is the mock recorder for MockAccessPermissionUseCase.
type MockAccessPermissionUseCaseMockRecorder struct {
	mock *MockAccessPermissionUseCase
}

// NewMockAccessPermissionUseCase creates a new mock instance.
func NewMockAccessPermissionUseCase(ctrl *gomock.Controller) *MockAccessPermissionUseCase {
	mock := &MockAccessPermissionUseCase{ctrl: ctrl}
	mock.recorder = &MockAccessPermissionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPermissionUseCase) EXPECT() *MockAccessPermissionUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccessPermissionUseCase) Create(ctx context.Context, payload dto.CreateAccessPermissionPayloadDTO) (*dto.AccessPermissionDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, payload)
	ret0, _ := ret[0].(*dto.AccessPermissionDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccessPermissionUseCaseMockRecorder) Create(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccessPermissionUseCase)(nil).Create), ctx, payload)
}

// Delete mocks base method.
func (m *MockAccessPermissionUseCase) Delete(ctx context.Context, id string) (*dto.AccessPermissionDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*dto.AccessPermissionDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAccessPermissionUseCaseMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccessPermissionUseCase)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockAccessPermissionUseCase) GetByID(ctx context.Context, id string) (*dto.AccessPermissionDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*dto.AccessPermissionDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAccessPermissionUseCaseMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAccessPermissionUseCase)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockAccessPermissionUseCase) List(ctx context.Context, page, size int, keyword string) (*dto.PaginationDTOResponse, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, page, size, keyword)
	ret0, _ := ret[0].(*dto.PaginationDTOResponse)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAccessPermissionUseCaseMockRecorder) List(ctx, page, size, keyword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccessPermissionUseCase)(nil).List), ctx, page, size, keyword)
}

// Update mocks base method.
func (m *MockAccessPermissionUseCase) Update(ctx context.Context, id string, payload dto.UpdateAccessPermissionPayloadDTO) (*dto.AccessPermissionDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, payload)
	ret0, _ := ret[0].(*dto.AccessPermissionDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAccessPermissionUseCaseMockRecorder) Update(ctx, id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccessPermissionUseCase)(nil).Update), ctx, id, payload)
}
