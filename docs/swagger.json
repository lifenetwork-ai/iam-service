{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/api/v1/account/api-key": {
            "put": {
                "description": "Generate or update the API key for an account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "Create or update API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token (e.g., 'Bearer \u003ctoken\u003e')",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API key updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/account/me": {
            "get": {
                "description": "This endpoint retrieves the details of the currently authenticated user using the provided access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "Get current user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token (e.g., 'Bearer \u003ctoken\u003e')",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/dto.AccountDetailDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/account/role": {
            "put": {
                "description": "Update the role of an account and save associated role-specific details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "Update account role and role-specific details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token (e.g., 'Bearer \u003ctoken\u003e')",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Payload containing role and role-specific details",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateRolePayloadDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account role updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "This endpoint authenticates the user by email, username, or phone number, and returns an access token and refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate user",
                "parameters": [
                    {
                        "description": "User credentials (identifier, password, and identifier_type (e.g: email, username, phone))",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginPayloadDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful: {\\\"access_token\\\": \\\"...\\\", \\\"refresh_token\\\": \\\"...\\\"}",
                        "schema": {
                            "$ref": "#/definitions/dto.TokenPairDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "description": "This endpoint invalidates the refresh token, effectively logging the user out.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "description": "Logout payload containing the refresh token",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LogoutPayloadDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout successful: {\\\"success\\\": true}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh-tokens": {
            "post": {
                "description": "This endpoint generates a new pair of access and refresh tokens using a valid refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Refresh tokens",
                "parameters": [
                    {
                        "description": "Refresh token payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshTokenPayloadDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.TokenPairDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "description": "This endpoint registers a new account and its associated role-specific details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Register a new account",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterPayloadDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful: {\\\"success\\\": true}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "409": {
                        "description": "Account already exists",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/iam/accounts/{accountID}/policies": {
            "post": {
                "description": "Maps a specified policy to an account by accountID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IAM"
                ],
                "summary": "Assign a policy to an account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token (e.g., 'Bearer \u003ctoken\u003e')",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Account ID to assign the policy to",
                        "name": "accountID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payload containing the policy ID",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AssignPolicyPayloadDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Policy assigned successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid payload or missing policy",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "404": {
                        "description": "Account or policy not found",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/iam/policies": {
            "get": {
                "description": "Fetches a list of IAM policies along with their associated permissions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IAM"
                ],
                "summary": "Get policies with permissions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of policies with permissions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PolicyWithPermissionsDTO"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new IAM policy to the system. Only accessible to Admins.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IAM"
                ],
                "summary": "Create a new policy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Payload for creating policy",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PolicyPayloadDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Policy created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/iam/policies/permissions": {
            "post": {
                "description": "Adds a new permission to an existing IAM policy.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IAM"
                ],
                "summary": "Assign a permission to a policy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Payload for assigning permission",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PermissionPayloadDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Permission assigned successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid payload or missing policy",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "404": {
                        "description": "Policy not found",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "409": {
                        "description": "Permission already exists",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/notifications/data-upload": {
            "post": {
                "description": "This webhook receives raw payload data when a user successfully uploads data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Notify about successful data upload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token (e.g., 'Bearer \u003ctoken\u003e')",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Payload containing file information",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.FileInfoPayloadDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notification received successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/organization": {
            "get": {
                "description": "Get organizations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Retrieve organizations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Keyword",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of organizations",
                        "schema": {
                            "$ref": "#/definitions/dto.PaginationDTOResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid page number or size",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Create a new organization",
                "parameters": [
                    {
                        "description": "organization payload",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OrganizationCreatePayloadDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation of organization",
                        "schema": {
                            "$ref": "#/definitions/dto.OrganizationDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/organization/{organization_id}": {
            "get": {
                "description": "Get organization by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Retrieve organization by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of organization",
                        "schema": {
                            "$ref": "#/definitions/dto.OrganizationDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid request ID",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "404": {
                        "description": "organization not found",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Update an existing organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "organization payload",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OrganizationUpdatePayloadDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful update of organization",
                        "schema": {
                            "$ref": "#/definitions/dto.OrganizationDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "404": {
                        "description": "organization not found",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Delete an existing organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful deletion of organization"
                    },
                    "400": {
                        "description": "Invalid request ID",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "404": {
                        "description": "organization not found",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/validators/active": {
            "get": {
                "description": "Fetches a list of active validators. Optionally, a comma-separated list of validator IDs can be provided to filter the results.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "validators"
                ],
                "summary": "Get Active Validators",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token (e.g., 'Bearer \u003ctoken\u003e')",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of validator IDs to filter results (e.g., 'id1,id2,id3')",
                        "name": "validator_ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of active validators",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.AccountDetailDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.GeneralError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "constants.IdentifierType": {
            "type": "string",
            "enum": [
                "email",
                "username",
                "phone"
            ],
            "x-enum-varnames": [
                "IdentifierEmail",
                "IdentifierUsername",
                "IdentifierPhone"
            ]
        },
        "dto.AccountDTO": {
            "type": "object",
            "properties": {
                "api_key": {
                    "description": "Nullable",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "oauth_id": {
                    "description": "Nullable",
                    "type": "string"
                },
                "oauth_provider": {
                    "description": "Nullable",
                    "type": "string"
                },
                "private_key": {
                    "description": "Nullable",
                    "type": "string"
                },
                "public_key": {
                    "description": "Nullable",
                    "type": "string"
                },
                "role": {
                    "description": "USER, PARTNER, CUSTOMER, VALIDATOR",
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.AccountDetailDTO": {
            "type": "object",
            "properties": {
                "account": {
                    "$ref": "#/definitions/dto.AccountDTO"
                },
                "company_name": {
                    "type": "string"
                },
                "contact_name": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "industry": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "organization_name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "validation_organization": {
                    "type": "string"
                }
            }
        },
        "dto.AssignPolicyPayloadDTO": {
            "type": "object",
            "required": [
                "policy_id"
            ],
            "properties": {
                "policy_id": {
                    "type": "string"
                }
            }
        },
        "dto.FileInfoPayloadDTO": {
            "type": "object",
            "required": [
                "id",
                "name",
                "owner_id",
                "share_count"
            ],
            "properties": {
                "id": {
                    "description": "File ID",
                    "type": "string"
                },
                "name": {
                    "description": "File name",
                    "type": "string"
                },
                "owner_id": {
                    "description": "Owner ID",
                    "type": "string"
                },
                "share_count": {
                    "description": "Number of shares",
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "dto.LoginPayloadDTO": {
            "type": "object",
            "required": [
                "identifier",
                "identifier_type",
                "password"
            ],
            "properties": {
                "identifier": {
                    "description": "Identifier (email, username, or phone number)",
                    "type": "string"
                },
                "identifier_type": {
                    "description": "Type of identifier: \"email\", \"username\", or \"phone\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/constants.IdentifierType"
                        }
                    ]
                },
                "password": {
                    "description": "User password",
                    "type": "string"
                }
            }
        },
        "dto.LogoutPayloadDTO": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.OrganizationCreatePayloadDTO": {
            "type": "object",
            "required": [
                "code",
                "name"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                }
            }
        },
        "dto.OrganizationDTO": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.OrganizationUpdatePayloadDTO": {
            "type": "object",
            "required": [
                "code",
                "name"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                }
            }
        },
        "dto.PaginationDTOResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {}
                },
                "next_page": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.PermissionDTO": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "The action this permission allows",
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamp of permission creation",
                    "type": "string"
                },
                "description": {
                    "description": "Optional description of the permission",
                    "type": "string"
                },
                "id": {
                    "description": "Unique ID for the permission",
                    "type": "string"
                },
                "policy_id": {
                    "description": "Foreign key referencing IAMPolicy",
                    "type": "string"
                },
                "resource": {
                    "description": "The resource this permission applies to",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp of last update",
                    "type": "string"
                }
            }
        },
        "dto.PermissionPayloadDTO": {
            "type": "object",
            "required": [
                "action",
                "resource"
            ],
            "properties": {
                "action": {
                    "description": "The action the permission allows",
                    "type": "string"
                },
                "description": {
                    "description": "Optional description of the permission",
                    "type": "string"
                },
                "policy_id": {
                    "description": "Either PolicyID or PolicyName is required",
                    "type": "string"
                },
                "policy_name": {
                    "description": "Either PolicyID or PolicyName is required",
                    "type": "string"
                },
                "resource": {
                    "description": "The resource the permission applies to",
                    "type": "string"
                }
            }
        },
        "dto.PolicyDTO": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.PolicyPayloadDTO": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Optional description",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the policy",
                    "type": "string"
                }
            }
        },
        "dto.PolicyWithPermissionsDTO": {
            "type": "object",
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PermissionDTO"
                    }
                },
                "policy": {
                    "$ref": "#/definitions/dto.PolicyDTO"
                }
            }
        },
        "dto.RefreshTokenPayloadDTO": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.RegisterPayloadDTO": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.RoleDetailsPayloadDTO": {
            "type": "object",
            "properties": {
                "company_name": {
                    "description": "Partner fields",
                    "type": "string"
                },
                "contact_name": {
                    "type": "string"
                },
                "first_name": {
                    "description": "Common fields",
                    "type": "string"
                },
                "industry": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "organization_name": {
                    "description": "Customer fields",
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "validation_organization": {
                    "description": "Validator fields",
                    "type": "string"
                }
            }
        },
        "dto.TokenPairDTO": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "The JWT Access Token",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "The plain Refresh Token",
                    "type": "string"
                }
            }
        },
        "dto.UpdateRolePayloadDTO": {
            "type": "object",
            "required": [
                "role"
            ],
            "properties": {
                "role": {
                    "description": "USER, PARTNER, CUSTOMER, VALIDATOR",
                    "type": "string"
                },
                "role_details": {
                    "description": "Role-specific details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.RoleDetailsPayloadDTO"
                        }
                    ]
                }
            }
        },
        "response.GeneralError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}