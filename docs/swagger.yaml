definitions:
  dto.AccessPermissionDTO:
    properties:
      id:
        type: string
    type: object
  dto.AccessPolicyDTO:
    properties:
      id:
        type: string
    type: object
  dto.AccessSessionDTO:
    properties:
      id:
        type: string
    type: object
  dto.CreateAccessPermissionPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.CreateAccessPolicyPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.CreateIdentityGroupPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.CreateIdentityOrganizationPayloadDTO:
    properties:
      authenticate_url:
        type: string
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
      self_authenticate:
        type: boolean
    required:
    - authenticate_url
    - code
    - name
    - self_authenticate
    type: object
  dto.CreateIdentityRolePayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.CreateIdentityServicePayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.IdentityChallengeVerifyDTO:
    properties:
      code:
        type: string
      flow_id:
        type: string
      type:
        enum:
        - register
        - login
        type: string
    required:
    - code
    - flow_id
    - type
    type: object
  dto.IdentityChallengeWithEmailDTO:
    properties:
      email:
        type: string
    type: object
  dto.IdentityChallengeWithPhoneDTO:
    properties:
      phone:
        type: string
    type: object
  dto.IdentityGroupDTO:
    properties:
      id:
        type: string
    type: object
  dto.IdentityOrganizationDTO:
    properties:
      authenticate_url:
        type: string
      code:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      self_authenticate:
        type: boolean
      updated_at:
        type: string
    type: object
  dto.IdentityRoleDTO:
    properties:
      id:
        type: string
    type: object
  dto.IdentityServiceDTO:
    properties:
      id:
        type: string
    type: object
  dto.IdentityUserAuthDTO:
    properties:
      active:
        type: boolean
      authenticated_at:
        type: string
      authentication_methods:
        description: Optional session metadata
        items:
          type: string
        type: array
      expires_at:
        type: string
      issued_at:
        type: string
      session_id:
        description: Core session fields from Kratos
        type: string
      session_token:
        description: Token used for authenticating subsequent requests
        type: string
      user:
        allOf:
        - $ref: '#/definitions/dto.IdentityUserDTO'
        description: User information
      verification_flow:
        $ref: '#/definitions/dto.IdentityUserChallengeDTO'
      verification_needed:
        description: Verification flow (for incomplete registrations)
        type: boolean
    type: object
  dto.IdentityUserChallengeDTO:
    properties:
      challenge_at:
        type: integer
      flow_id:
        type: string
      receiver:
        type: string
    type: object
  dto.IdentityUserDTO:
    properties:
      created_at:
        type: integer
      email:
        type: string
      first_name:
        type: string
      full_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      name:
        type: string
      phone:
        type: string
      seed:
        type: string
      status:
        type: boolean
      tenant:
        type: string
      updated_at:
        type: integer
      user_name:
        type: string
    type: object
  dto.IdentityUserRegisterDTO:
    properties:
      email:
        type: string
      phone:
        type: string
      tenant:
        type: string
    required:
    - tenant
    type: object
  dto.PaginationDTOResponse:
    properties:
      data:
        items: {}
        type: array
      next_page:
        type: integer
      page:
        type: integer
      size:
        type: integer
      total:
        type: integer
    type: object
  dto.UpdateAccessPermissionPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.UpdateAccessPolicyPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.UpdateIdentityGroupPayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.UpdateIdentityOrganizationPayloadDTO:
    properties:
      authenticate_url:
        type: string
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
      self_authenticate:
        type: boolean
    required:
    - authenticate_url
    - code
    - name
    - self_authenticate
    type: object
  dto.UpdateIdentityRolePayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  dto.UpdateIdentityServicePayloadDTO:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
      parent_id:
        type: string
    required:
    - code
    - name
    type: object
  response.ErrorResponse:
    properties:
      code:
        type: string
      errors:
        items:
          additionalProperties: true
          type: object
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  response.SuccessResponse:
    properties:
      code:
        type: string
      data:
        additionalProperties: true
        type: object
      message:
        type: string
      status:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/v1/groups:
    get:
      consumes:
      - application/json
      description: Get groups
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of groups
          schema:
            $ref: '#/definitions/dto.PaginationDTOResponse'
        "400":
          description: Invalid page number or size
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve groups
      tags:
      - groups
    post:
      consumes:
      - application/json
      description: Create a new group
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: group payload
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/dto.CreateIdentityGroupPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation of group
          schema:
            $ref: '#/definitions/dto.IdentityGroupDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new group
      tags:
      - groups
  /api/v1/groups/{group_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing group
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: group ID
        in: path
        name: group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion of group
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: group not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an existing group
      tags:
      - groups
    get:
      consumes:
      - application/json
      description: Get group by ID
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: group ID
        in: path
        name: group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of group
          schema:
            $ref: '#/definitions/dto.IdentityGroupDTO'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: group not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve group by ID
      tags:
      - groups
    put:
      consumes:
      - application/json
      description: Update an existing group
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: group ID
        in: path
        name: group_id
        required: true
        type: string
      - description: group payload
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateIdentityGroupPayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update of group
          schema:
            $ref: '#/definitions/dto.IdentityGroupDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: group not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing group
      tags:
      - groups
  /api/v1/organizations:
    get:
      consumes:
      - application/json
      description: Get organizations
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of organizations
          schema:
            $ref: '#/definitions/dto.PaginationDTOResponse'
        "400":
          description: Invalid page number or size
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve organizations
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Create a new organization
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: organization payload
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/dto.CreateIdentityOrganizationPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation of organization
          schema:
            $ref: '#/definitions/dto.IdentityOrganizationDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new organization
      tags:
      - organizations
  /api/v1/organizations/{organization_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing organization
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion of organization
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an existing organization
      tags:
      - organizations
    get:
      consumes:
      - application/json
      description: Get organization by ID
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of organization
          schema:
            $ref: '#/definitions/dto.IdentityOrganizationDTO'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve organization by ID
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: Update an existing organization
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: organization payload
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateIdentityOrganizationPayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update of organization
          schema:
            $ref: '#/definitions/dto.IdentityOrganizationDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing organization
      tags:
      - organizations
  /api/v1/permissions:
    get:
      consumes:
      - application/json
      description: Get permissions
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of permissions
          schema:
            $ref: '#/definitions/dto.PaginationDTOResponse'
        "400":
          description: Invalid page number or size
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve permissions
      tags:
      - permissions
    post:
      consumes:
      - application/json
      description: Create a new permission
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: permission payload
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAccessPermissionPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation of permission
          schema:
            $ref: '#/definitions/dto.AccessPermissionDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new permission
      tags:
      - permissions
  /api/v1/permissions/{permission_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing permission
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: permission ID
        in: path
        name: permission_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion of permission
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: permission not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an existing permission
      tags:
      - permissions
    get:
      consumes:
      - application/json
      description: Get permission by ID
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: permission ID
        in: path
        name: permission_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of permission
          schema:
            $ref: '#/definitions/dto.AccessPermissionDTO'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: permission not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve permission by ID
      tags:
      - permissions
    put:
      consumes:
      - application/json
      description: Update an existing permission
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: permission ID
        in: path
        name: permission_id
        required: true
        type: string
      - description: permission payload
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAccessPermissionPayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update of permission
          schema:
            $ref: '#/definitions/dto.AccessPermissionDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: permission not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing permission
      tags:
      - permissions
  /api/v1/policies:
    get:
      consumes:
      - application/json
      description: Get policies
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of policies
          schema:
            $ref: '#/definitions/dto.PaginationDTOResponse'
        "400":
          description: Invalid page number or size
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve policies
      tags:
      - policies
    post:
      consumes:
      - application/json
      description: Create a new policy
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: policy payload
        in: body
        name: policy
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAccessPolicyPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation of policy
          schema:
            $ref: '#/definitions/dto.AccessPolicyDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new policy
      tags:
      - policies
  /api/v1/policies/{policy_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing policy
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: policy ID
        in: path
        name: policy_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion of policy
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: policy not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an existing policy
      tags:
      - policies
    get:
      consumes:
      - application/json
      description: Get policy by ID
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: policy ID
        in: path
        name: policy_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of policy
          schema:
            $ref: '#/definitions/dto.AccessPolicyDTO'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: policy not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve policy by ID
      tags:
      - policies
    put:
      consumes:
      - application/json
      description: Update an existing policy
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: policy ID
        in: path
        name: policy_id
        required: true
        type: string
      - description: policy payload
        in: body
        name: policy
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAccessPolicyPayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update of policy
          schema:
            $ref: '#/definitions/dto.AccessPolicyDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: policy not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing policy
      tags:
      - policies
  /api/v1/roles:
    get:
      consumes:
      - application/json
      description: Get roles
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of roles
          schema:
            $ref: '#/definitions/dto.PaginationDTOResponse'
        "400":
          description: Invalid page number or size
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: role payload
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.CreateIdentityRolePayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation of role
          schema:
            $ref: '#/definitions/dto.IdentityRoleDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new role
      tags:
      - roles
  /api/v1/roles/{role_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing role
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion of role
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: role not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an existing role
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Get role by ID
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of role
          schema:
            $ref: '#/definitions/dto.IdentityRoleDTO'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: role not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve role by ID
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update an existing role
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: role ID
        in: path
        name: role_id
        required: true
        type: string
      - description: role payload
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateIdentityRolePayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update of role
          schema:
            $ref: '#/definitions/dto.IdentityRoleDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: role not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing role
      tags:
      - roles
  /api/v1/services:
    get:
      consumes:
      - application/json
      description: Get services
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of services
          schema:
            $ref: '#/definitions/dto.PaginationDTOResponse'
        "400":
          description: Invalid page number or size
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve services
      tags:
      - services
    post:
      consumes:
      - application/json
      description: Create a new service
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: service payload
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/dto.CreateIdentityServicePayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation of service
          schema:
            $ref: '#/definitions/dto.IdentityServiceDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new service
      tags:
      - services
  /api/v1/services/{service_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing service
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion of service
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: service not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an existing service
      tags:
      - services
    get:
      consumes:
      - application/json
      description: Get service by ID
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: service ID
        in: path
        name: service_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of service
          schema:
            $ref: '#/definitions/dto.IdentityServiceDTO'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: service not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve service by ID
      tags:
      - services
    put:
      consumes:
      - application/json
      description: Update an existing service
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: string
      - description: service payload
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateIdentityServicePayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update of service
          schema:
            $ref: '#/definitions/dto.IdentityServiceDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: service not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing service
      tags:
      - services
  /api/v1/sessions:
    get:
      consumes:
      - application/json
      description: Get sessions
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of sessions
          schema:
            $ref: '#/definitions/dto.PaginationDTOResponse'
        "400":
          description: Invalid page number or size
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve sessions
      tags:
      - sessions
  /api/v1/sessions/{session_id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing session
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion of session
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: session not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete an existing session
      tags:
      - sessions
    get:
      consumes:
      - application/json
      description: Get session by ID
      parameters:
      - description: Organization ID
        in: header
        name: X-Organization-Id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of session
          schema:
            $ref: '#/definitions/dto.AccessSessionDTO'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: session not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve session by ID
      tags:
      - sessions
  /api/v1/users/challenge-verify:
    post:
      consumes:
      - application/json
      description: Verify either a login challenge or registration flow
      parameters:
      - description: verification payload, type can be registration or login
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityChallengeVerifyDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful verification
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request payload or verification code
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - verification failed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Challenge session not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Verify the challenge or registration
      tags:
      - users
  /api/v1/users/challenge-with-email:
    post:
      consumes:
      - application/json
      description: Login with email and otp
      parameters:
      - description: challenge payload
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityChallengeWithEmailDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful make a challenge with Email and OTP
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid email format or missing email
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Login failed - invalid credentials
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: User not found - no user registered with this email address
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login with email and otp
      tags:
      - users
  /api/v1/users/challenge-with-phone:
    post:
      consumes:
      - application/json
      description: Login with phone and otp
      parameters:
      - description: challenge payload
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityChallengeWithPhoneDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful make a challenge with Phone and OTP
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid phone number format or missing phone
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Login failed - invalid credentials
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: User not found - no user registered with this phone number
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login with phone and otp
      tags:
      - users
  /api/v1/users/logout:
    post:
      consumes:
      - application/json
      description: De-authenticate user
      parameters:
      - default: Bearer <token>
        description: Bearer Token(Bearer ory...)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Empty request body
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Successful de-authenticate user
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: De-authenticate user
      tags:
      - users
  /api/v1/users/me:
    get:
      consumes:
      - application/json
      description: Get user profile
      parameters:
      - default: Bearer <token>
        description: Bearer Token(Bearer ory...)
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful get user profile
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized - Missing or invalid token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get user profile
      tags:
      - users
  /api/v1/users/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: 'Only email or phone must be provided, if both are provided then
          error will be returned. Tenant field is required(available value: `genetica`,`life_ai`)'
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityUserRegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful user registration with verification flow
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.IdentityUserAuthDTO'
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new user
      tags:
      - users
swagger: "2.0"
