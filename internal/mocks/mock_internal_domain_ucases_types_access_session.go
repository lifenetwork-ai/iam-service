// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/ucases/types/access_session.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/ucases/types/access_session.go -package=mocks -destination=internal/mocks/mock_internal_domain_ucases_types_access_session.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/lifenetwork-ai/iam-service/internal/delivery/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockAccessSessionUseCase is a mock of AccessSessionUseCase interface.
type MockAccessSessionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAccessSessionUseCaseMockRecorder
	isgomock struct{}
}

// MockAccessSessionUseCaseMockRecorder is the mock recorder for MockAccessSessionUseCase.
type MockAccessSessionUseCaseMockRecorder struct {
	mock *MockAccessSessionUseCase
}

// NewMockAccessSessionUseCase creates a new mock instance.
func NewMockAccessSessionUseCase(ctrl *gomock.Controller) *MockAccessSessionUseCase {
	mock := &MockAccessSessionUseCase{ctrl: ctrl}
	mock.recorder = &MockAccessSessionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessSessionUseCase) EXPECT() *MockAccessSessionUseCaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAccessSessionUseCase) Delete(ctx context.Context, id string) (*dto.AccessSessionDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*dto.AccessSessionDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAccessSessionUseCaseMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccessSessionUseCase)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockAccessSessionUseCase) GetByID(ctx context.Context, id string) (*dto.AccessSessionDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*dto.AccessSessionDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAccessSessionUseCaseMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAccessSessionUseCase)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockAccessSessionUseCase) List(ctx context.Context, page, size int, keyword string) (*dto.PaginationDTOResponse, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, page, size, keyword)
	ret0, _ := ret[0].(*dto.PaginationDTOResponse)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAccessSessionUseCaseMockRecorder) List(ctx, page, size, keyword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccessSessionUseCase)(nil).List), ctx, page, size, keyword)
}
