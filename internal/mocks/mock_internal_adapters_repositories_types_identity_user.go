// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/adapters/repositories/types/identity_user.go
//
// Generated by this command:
//
//	mockgen -source=./internal/adapters/repositories/types/identity_user.go -package=mocks -destination=internal/mocks/mock_internal_adapters_repositories_types_identity_user.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/lifenetwork-ai/iam-service/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockIdentityUserRepository is a mock of IdentityUserRepository interface.
type MockIdentityUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityUserRepositoryMockRecorder
	isgomock struct{}
}

// MockIdentityUserRepositoryMockRecorder is the mock recorder for MockIdentityUserRepository.
type MockIdentityUserRepositoryMockRecorder struct {
	mock *MockIdentityUserRepository
}

// NewMockIdentityUserRepository creates a new mock instance.
func NewMockIdentityUserRepository(ctrl *gomock.Controller) *MockIdentityUserRepository {
	mock := &MockIdentityUserRepository{ctrl: ctrl}
	mock.recorder = &MockIdentityUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityUserRepository) EXPECT() *MockIdentityUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIdentityUserRepository) Create(ctx context.Context, user *domain.IdentityUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIdentityUserRepositoryMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIdentityUserRepository)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockIdentityUserRepository) Delete(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIdentityUserRepositoryMockRecorder) Delete(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIdentityUserRepository)(nil).Delete), ctx, userID)
}

// FindByAppleID mocks base method.
func (m *MockIdentityUserRepository) FindByAppleID(ctx context.Context, appleID string) (*domain.IdentityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAppleID", ctx, appleID)
	ret0, _ := ret[0].(*domain.IdentityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAppleID indicates an expected call of FindByAppleID.
func (mr *MockIdentityUserRepositoryMockRecorder) FindByAppleID(ctx, appleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAppleID", reflect.TypeOf((*MockIdentityUserRepository)(nil).FindByAppleID), ctx, appleID)
}

// FindByEmail mocks base method.
func (m *MockIdentityUserRepository) FindByEmail(ctx context.Context, email string) (*domain.IdentityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.IdentityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockIdentityUserRepositoryMockRecorder) FindByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockIdentityUserRepository)(nil).FindByEmail), ctx, email)
}

// FindByFacebookID mocks base method.
func (m *MockIdentityUserRepository) FindByFacebookID(ctx context.Context, facebookID string) (*domain.IdentityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFacebookID", ctx, facebookID)
	ret0, _ := ret[0].(*domain.IdentityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFacebookID indicates an expected call of FindByFacebookID.
func (mr *MockIdentityUserRepositoryMockRecorder) FindByFacebookID(ctx, facebookID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFacebookID", reflect.TypeOf((*MockIdentityUserRepository)(nil).FindByFacebookID), ctx, facebookID)
}

// FindByGoogleID mocks base method.
func (m *MockIdentityUserRepository) FindByGoogleID(ctx context.Context, googleID string) (*domain.IdentityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGoogleID", ctx, googleID)
	ret0, _ := ret[0].(*domain.IdentityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGoogleID indicates an expected call of FindByGoogleID.
func (mr *MockIdentityUserRepositoryMockRecorder) FindByGoogleID(ctx, googleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGoogleID", reflect.TypeOf((*MockIdentityUserRepository)(nil).FindByGoogleID), ctx, googleID)
}

// FindByID mocks base method.
func (m *MockIdentityUserRepository) FindByID(ctx context.Context, userID string) (*domain.IdentityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, userID)
	ret0, _ := ret[0].(*domain.IdentityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIdentityUserRepositoryMockRecorder) FindByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIdentityUserRepository)(nil).FindByID), ctx, userID)
}

// FindByPhone mocks base method.
func (m *MockIdentityUserRepository) FindByPhone(ctx context.Context, phone string) (*domain.IdentityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", ctx, phone)
	ret0, _ := ret[0].(*domain.IdentityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockIdentityUserRepositoryMockRecorder) FindByPhone(ctx, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockIdentityUserRepository)(nil).FindByPhone), ctx, phone)
}

// FindBySelfAuthenticateID mocks base method.
func (m *MockIdentityUserRepository) FindBySelfAuthenticateID(ctx context.Context, selfAuthID string) (*domain.IdentityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySelfAuthenticateID", ctx, selfAuthID)
	ret0, _ := ret[0].(*domain.IdentityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySelfAuthenticateID indicates an expected call of FindBySelfAuthenticateID.
func (mr *MockIdentityUserRepositoryMockRecorder) FindBySelfAuthenticateID(ctx, selfAuthID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySelfAuthenticateID", reflect.TypeOf((*MockIdentityUserRepository)(nil).FindBySelfAuthenticateID), ctx, selfAuthID)
}

// FindByUsername mocks base method.
func (m *MockIdentityUserRepository) FindByUsername(ctx context.Context, username string) (*domain.IdentityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", ctx, username)
	ret0, _ := ret[0].(*domain.IdentityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockIdentityUserRepositoryMockRecorder) FindByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockIdentityUserRepository)(nil).FindByUsername), ctx, username)
}

// Update mocks base method.
func (m *MockIdentityUserRepository) Update(ctx context.Context, user *domain.IdentityUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIdentityUserRepositoryMockRecorder) Update(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIdentityUserRepository)(nil).Update), ctx, user)
}
