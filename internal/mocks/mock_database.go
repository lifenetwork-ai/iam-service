// Code generated by MockGen. DO NOT EDIT.
// Source: ./infrastructures/interfaces/database.go
//
// Generated by this command:
//
//	mockgen -source=./infrastructures/interfaces/database.go -package=mocks -destination=mocks/mock_database.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSQLClient is a mock of SQLClient interface.
type MockSQLClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLClientMockRecorder
	isgomock struct{}
}

// MockSQLClientMockRecorder is the mock recorder for MockSQLClient.
type MockSQLClientMockRecorder struct {
	mock *MockSQLClient
}

// NewMockSQLClient creates a new mock instance.
func NewMockSQLClient(ctrl *gomock.Controller) *MockSQLClient {
	mock := &MockSQLClient{ctrl: ctrl}
	mock.recorder = &MockSQLClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLClient) EXPECT() *MockSQLClientMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockSQLClient) Connect() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockSQLClientMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockSQLClient)(nil).Connect))
}
