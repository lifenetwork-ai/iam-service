basePath: /
definitions:
  dto.AdminAccountDTO:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        type: string
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  dto.CheckPermissionRequestDTO:
    properties:
      namespace:
        type: string
      object:
        type: string
      relation:
        type: string
      tenant_member:
        allOf:
        - $ref: '#/definitions/dto.TenantMemberDTO'
        description: SubjectSet defines the subject that is being checked permission
          for
    required:
    - namespace
    - object
    - relation
    - tenant_member
    type: object
  dto.CheckPermissionResponseDTO:
    properties:
      allowed:
        description: Whether the action is allowed
        type: boolean
      reason:
        description: Optional explanation for why permission was denied
        type: string
    type: object
  dto.CourierWebhookRequestDTO:
    properties:
      Body:
        type: string
      To:
        type: string
    required:
    - Body
    - To
    type: object
  dto.CreateAdminAccountPayloadDTO:
    properties:
      password:
        minLength: 8
        type: string
      role:
        enum:
        - admin
        type: string
      username:
        type: string
    required:
    - password
    - role
    - username
    type: object
  dto.CreateRelationTupleRequestDTO:
    properties:
      identifier:
        type: string
      namespace:
        type: string
      object:
        type: string
      relation:
        type: string
    required:
    - identifier
    - namespace
    - object
    - relation
    type: object
  dto.CreateTenantPayloadDTO:
    properties:
      admin_url:
        type: string
      name:
        type: string
      public_url:
        type: string
    required:
    - admin_url
    - name
    - public_url
    type: object
  dto.DelegateAccessRequestDTO:
    properties:
      identifier:
        type: string
      permission:
        type: string
      resource_id:
        type: string
      resource_type:
        type: string
      tenant_id:
        type: string
    required:
    - identifier
    - permission
    - resource_id
    - resource_type
    - tenant_id
    type: object
  dto.IdentityChallengeVerifyDTO:
    properties:
      code:
        type: string
      flow_id:
        type: string
      type:
        enum:
        - register
        - login
        type: string
    required:
    - code
    - flow_id
    - type
    type: object
  dto.IdentityChallengeWithEmailDTO:
    properties:
      email:
        type: string
    type: object
  dto.IdentityChallengeWithPhoneDTO:
    properties:
      phone:
        type: string
    type: object
  dto.IdentityUserRegisterDTO:
    properties:
      email:
        type: string
      phone:
        type: string
    type: object
  dto.SelfCheckPermissionRequestDTO:
    properties:
      namespace:
        description: Name of the resource's group (e.g., "document", "user")
        type: string
      object:
        description: The specific resource (e.g., "document:123")
        type: string
      relation:
        description: The relation between the subject and the object (e.g., "read",
          "write", "delete")
        type: string
    required:
    - namespace
    - object
    - relation
    type: object
  dto.TenantDTO:
    properties:
      admin_url:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      public_url:
        type: string
      updated_at:
        type: string
    type: object
  dto.TenantMemberDTO:
    properties:
      identifier:
        description: Identifier is the identifier of the tenant member (can be email
          or phone number)
        type: string
      tenant_id:
        type: string
    required:
    - identifier
    - tenant_id
    type: object
  dto.TenantPaginationDTOResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.TenantDTO'
        type: array
      next_page:
        type: integer
      page:
        type: integer
      page_size:
        type: integer
      total_count:
        type: integer
    type: object
  dto.UpdateTenantPayloadDTO:
    properties:
      admin_url:
        type: string
      name:
        type: string
      public_url:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      code:
        type: string
      errors:
        items:
          additionalProperties: true
          type: object
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  response.SuccessResponse:
    properties:
      code:
        type: string
      data:
        additionalProperties: true
        type: object
      message:
        type: string
      status:
        type: integer
    type: object
  types.IdentityUserAuthResponse:
    properties:
      active:
        type: boolean
      authenticated_at:
        type: string
      authentication_methods:
        description: Optional session metadata
        items:
          type: string
        type: array
      expires_at:
        type: string
      issued_at:
        type: string
      session_id:
        description: Core session fields from Kratos
        type: string
      session_token:
        description: Token used for authenticating subsequent requests
        type: string
      user:
        allOf:
        - $ref: '#/definitions/types.IdentityUserResponse'
        description: User information
      verification_flow:
        $ref: '#/definitions/types.IdentityUserChallengeResponse'
      verification_needed:
        description: Verification flow (for incomplete registrations)
        type: boolean
    type: object
  types.IdentityUserChallengeResponse:
    properties:
      challenge_at:
        type: integer
      flow_id:
        type: string
      receiver:
        type: string
    type: object
  types.IdentityUserResponse:
    properties:
      created_at:
        type: integer
      email:
        type: string
      first_name:
        type: string
      full_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      name:
        type: string
      phone:
        type: string
      seed:
        type: string
      status:
        type: boolean
      tenant:
        type: string
      updated_at:
        type: integer
      user_name:
        type: string
    type: object
info:
  contact:
    email: support@lifenetwork.ai
    name: API Support
  description: Identity and Access Management Service
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: IAM Service API
  version: "1.0"
paths:
  /api/v1/admin/accounts:
    post:
      consumes:
      - application/json
      description: Create a new admin account (requires root account configured via
        ROOT_USERNAME and ROOT_PASSWORD env vars)
      parameters:
      - description: Admin account details
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAdminAccountPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation of admin account
          schema:
            $ref: '#/definitions/dto.AdminAccountDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - Not the root account
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Create a new admin account
      tags:
      - admin
  /api/v1/admin/tenants:
    get:
      consumes:
      - application/json
      description: Get a paginated list of tenants with optional search
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10)'
        in: query
        name: size
        type: integer
      - description: Search keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TenantPaginationDTOResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      summary: List all tenants
      tags:
      - tenants
    post:
      consumes:
      - application/json
      description: Create a new tenant with the provided details
      parameters:
      - description: Tenant details
        in: body
        name: tenant
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTenantPayloadDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.TenantDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new tenant
      tags:
      - tenants
  /api/v1/admin/tenants/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a tenant and all associated data
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TenantDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a tenant
      tags:
      - tenants
    get:
      consumes:
      - application/json
      description: Get detailed information about a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TenantDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Get a tenant by ID
      tags:
      - tenants
    put:
      consumes:
      - application/json
      description: Update a tenant's details
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      - description: Tenant details
        in: body
        name: tenant
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTenantPayloadDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TenantDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update a tenant
      tags:
      - tenants
  /api/v1/courier/available-channels:
    get:
      consumes:
      - application/json
      description: Returns available delivery channels (SMS, WhatsApp, Zalo) based
        on receiver and tenant
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-Id
        required: true
        type: string
      - default: Bearer <token>
        description: Bearer Token (Bearer ory...)
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of available channels
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "400":
          description: Invalid receiver
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get available delivery channels
      tags:
      - courier
  /api/v1/courier/messages:
    post:
      consumes:
      - application/json
      description: Receive courier content and enqueue it for delivery
      parameters:
      - description: Courier message payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CourierWebhookRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Courier message enqueued successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Receive courier message (from webhook or sender)
      tags:
      - courier
  /api/v1/permissions/check:
    post:
      consumes:
      - application/json
      description: Check if a subject has permission to perform an action on an object
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-Id
        required: true
        type: string
      - description: Permission check request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CheckPermissionRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Permission check result
          schema:
            $ref: '#/definitions/dto.CheckPermissionResponseDTO'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Check permission
      tags:
      - permissions
  /api/v1/permissions/delegate:
    post:
      consumes:
      - application/json
      description: Delegate access to a resource
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-Id
        required: true
        type: string
      - default: Bearer <token>
        description: Bearer Token (Bearer ory...)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Delegate access request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.DelegateAccessRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Access delegated successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delegate access
      tags:
      - permissions
  /api/v1/permissions/relation-tuples:
    post:
      consumes:
      - application/json
      description: Create a relation tuple for a tenant member
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-Id
        required: true
        type: string
      - default: Bearer <token>
        description: Bearer Token (Bearer ory...)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Relation tuple creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRelationTupleRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Relation tuple created successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create relation tuple
      tags:
      - permissions
  /api/v1/permissions/self-check:
    post:
      consumes:
      - application/json
      description: Check if a subject has permission to perform an action on an object
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-Id
        required: true
        type: string
      - description: Permission check request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SelfCheckPermissionRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Permission check result
          schema:
            $ref: '#/definitions/dto.CheckPermissionResponseDTO'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: User-facing permission check
      tags:
      - permissions
  /api/v1/users/challenge-verify:
    post:
      consumes:
      - application/json
      description: |-
        Verify either a login challenge or registration flow
        Verify a one-time code sent to user for either login or registration challenge.
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-Id
        required: true
        type: string
      - description: 'Verification payload. `type` must be one of: `register`, `login`'
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityChallengeVerifyDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Verification successful
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request payload or code
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Too many attempts, rate limit exceeded
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Verify login or registration challenge
      tags:
      - users
  /api/v1/users/challenge-with-email:
    post:
      consumes:
      - application/json
      description: Login with email and otp
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-Id
        required: true
        type: string
      - description: challenge payload
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityChallengeWithEmailDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful make a challenge with Email and OTP
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Too many attempts, rate limit exceeded
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login with email and otp
      tags:
      - users
  /api/v1/users/challenge-with-phone:
    post:
      consumes:
      - application/json
      description: Login with phone and otp
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-Id
        required: true
        type: string
      - description: challenge payload
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityChallengeWithPhoneDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful make a challenge with Phone and OTP
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Too many attempts, rate limit exceeded
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login with phone and otp
      tags:
      - users
  /api/v1/users/logout:
    post:
      consumes:
      - application/json
      description: De-authenticate user
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-Id
        required: true
        type: string
      - default: Bearer <token>
        description: Bearer Token (Bearer ory...)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Empty request body
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Successful de-authenticate user
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data: {}
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - Invalid or missing token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Too many attempts, rate limit exceeded
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: De-authenticate user
      tags:
      - users
  /api/v1/users/me:
    get:
      consumes:
      - application/json
      description: Get user profile
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-Id
        required: true
        type: string
      - default: Bearer <token>
        description: Bearer Token (Bearer ory...)
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful get user profile
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get user profile
      tags:
      - users
  /api/v1/users/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-Id
        required: true
        type: string
      - description: Only email or phone must be provided, if both are provided then
          error will be returned
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityUserRegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful user registration with verification flow
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/types.IdentityUserAuthResponse'
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Email or phone number already exists
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Too many attempts, rate limit exceeded
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new user
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
