definitions:
  dto.IdentityChallengeVerifyDTO:
    properties:
      code:
        type: string
      flow_id:
        type: string
      type:
        enum:
        - register
        - login
        type: string
    required:
    - code
    - flow_id
    - type
    type: object
  dto.IdentityChallengeWithEmailDTO:
    properties:
      email:
        type: string
    type: object
  dto.IdentityChallengeWithPhoneDTO:
    properties:
      phone:
        type: string
    type: object
  dto.IdentityUserAuthDTO:
    properties:
      active:
        type: boolean
      authenticated_at:
        type: string
      authentication_methods:
        description: Optional session metadata
        items:
          type: string
        type: array
      expires_at:
        type: string
      issued_at:
        type: string
      session_id:
        description: Core session fields from Kratos
        type: string
      session_token:
        description: Token used for authenticating subsequent requests
        type: string
      user:
        allOf:
        - $ref: '#/definitions/dto.IdentityUserDTO'
        description: User information
      verification_flow:
        $ref: '#/definitions/dto.IdentityUserChallengeDTO'
      verification_needed:
        description: Verification flow (for incomplete registrations)
        type: boolean
    type: object
  dto.IdentityUserChallengeDTO:
    properties:
      challenge_at:
        type: integer
      flow_id:
        type: string
      receiver:
        type: string
    type: object
  dto.IdentityUserDTO:
    properties:
      created_at:
        type: integer
      email:
        type: string
      first_name:
        type: string
      full_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      name:
        type: string
      phone:
        type: string
      seed:
        type: string
      status:
        type: boolean
      tenant:
        type: string
      updated_at:
        type: integer
      user_name:
        type: string
    type: object
  dto.IdentityUserRegisterDTO:
    properties:
      email:
        type: string
      phone:
        type: string
      tenant:
        type: string
    required:
    - tenant
    type: object
  response.ErrorResponse:
    properties:
      code:
        type: string
      errors:
        items:
          additionalProperties: true
          type: object
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  response.SuccessResponse:
    properties:
      code:
        type: string
      data:
        additionalProperties: true
        type: object
      message:
        type: string
      status:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/v1/users/challenge-verify:
    post:
      consumes:
      - application/json
      description: Verify a one-time code sent to user for either login or registration
        challenge.
      parameters:
      - description: 'Verification payload. `type` must be one of: `register`, `login`'
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityChallengeVerifyDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Verification successful
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request payload or code
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Verify login or registration challenge
      tags:
      - users
  /api/v1/users/challenge-with-email:
    post:
      consumes:
      - application/json
      description: Login with email and otp
      parameters:
      - description: challenge payload
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityChallengeWithEmailDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful make a challenge with Email and OTP
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login with email and otp
      tags:
      - users
  /api/v1/users/challenge-with-phone:
    post:
      consumes:
      - application/json
      description: Login with phone and otp
      parameters:
      - description: challenge payload
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityChallengeWithPhoneDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful make a challenge with Phone and OTP
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login with phone and otp
      tags:
      - users
  /api/v1/users/logout:
    post:
      consumes:
      - application/json
      description: De-authenticate user
      parameters:
      - default: Bearer <token>
        description: Bearer Token(Bearer ory...)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Empty request body
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Successful de-authenticate user
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data: {}
              type: object
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: De-authenticate user
      tags:
      - users
  /api/v1/users/me:
    get:
      consumes:
      - application/json
      description: Get user profile
      parameters:
      - default: Bearer <token>
        description: Bearer Token(Bearer ory...)
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful get user profile
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get user profile
      tags:
      - users
  /api/v1/users/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: 'Only email or phone must be provided, if both are provided then
          error will be returned. Tenant field is required(available value: `genetica`,`life_ai`)'
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.IdentityUserRegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful user registration with verification flow
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.IdentityUserAuthDTO'
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new user
      tags:
      - users
swagger: "2.0"
