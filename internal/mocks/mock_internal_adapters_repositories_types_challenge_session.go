// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/adapters/repositories/types/challenge_session.go
//
// Generated by this command:
//
//	mockgen -source=./internal/adapters/repositories/types/challenge_session.go -package=mocks -destination=internal/mocks/mock_internal_adapters_repositories_types_challenge_session.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/lifenetwork-ai/iam-service/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockChallengeSessionRepository is a mock of ChallengeSessionRepository interface.
type MockChallengeSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChallengeSessionRepositoryMockRecorder
	isgomock struct{}
}

// MockChallengeSessionRepositoryMockRecorder is the mock recorder for MockChallengeSessionRepository.
type MockChallengeSessionRepositoryMockRecorder struct {
	mock *MockChallengeSessionRepository
}

// NewMockChallengeSessionRepository creates a new mock instance.
func NewMockChallengeSessionRepository(ctrl *gomock.Controller) *MockChallengeSessionRepository {
	mock := &MockChallengeSessionRepository{ctrl: ctrl}
	mock.recorder = &MockChallengeSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChallengeSessionRepository) EXPECT() *MockChallengeSessionRepositoryMockRecorder {
	return m.recorder
}

// GetChallenge mocks base method.
func (m *MockChallengeSessionRepository) GetChallenge(ctx context.Context, sessionID string) (*domain.ChallengeSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChallenge", ctx, sessionID)
	ret0, _ := ret[0].(*domain.ChallengeSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChallenge indicates an expected call of GetChallenge.
func (mr *MockChallengeSessionRepositoryMockRecorder) GetChallenge(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallenge", reflect.TypeOf((*MockChallengeSessionRepository)(nil).GetChallenge), ctx, sessionID)
}

// SaveChallenge mocks base method.
func (m *MockChallengeSessionRepository) SaveChallenge(ctx context.Context, sessionID string, challenge *domain.ChallengeSession, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveChallenge", ctx, sessionID, challenge, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveChallenge indicates an expected call of SaveChallenge.
func (mr *MockChallengeSessionRepositoryMockRecorder) SaveChallenge(ctx, sessionID, challenge, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveChallenge", reflect.TypeOf((*MockChallengeSessionRepository)(nil).SaveChallenge), ctx, sessionID, challenge, ttl)
}
