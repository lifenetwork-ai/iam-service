// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/ucases/types/identity_user.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/ucases/types/identity_user.go -package=mock_types -destination=mocks/domain/ucases/types/mock_identity_user.go
//

// Package mock_types is a generated GoMock package.
package mock_types

import (
	context "context"
	reflect "reflect"

	dto "github.com/lifenetwork-ai/iam-service/internal/delivery/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIdentityUserUseCase is a mock of IdentityUserUseCase interface.
type MockIdentityUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityUserUseCaseMockRecorder
	isgomock struct{}
}

// MockIdentityUserUseCaseMockRecorder is the mock recorder for MockIdentityUserUseCase.
type MockIdentityUserUseCaseMockRecorder struct {
	mock *MockIdentityUserUseCase
}

// NewMockIdentityUserUseCase creates a new mock instance.
func NewMockIdentityUserUseCase(ctrl *gomock.Controller) *MockIdentityUserUseCase {
	mock := &MockIdentityUserUseCase{ctrl: ctrl}
	mock.recorder = &MockIdentityUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityUserUseCase) EXPECT() *MockIdentityUserUseCaseMockRecorder {
	return m.recorder
}

// ChallengeVerify mocks base method.
func (m *MockIdentityUserUseCase) ChallengeVerify(ctx context.Context, sessionID, code string) (*dto.IdentityUserAuthDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChallengeVerify", ctx, sessionID, code)
	ret0, _ := ret[0].(*dto.IdentityUserAuthDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// ChallengeVerify indicates an expected call of ChallengeVerify.
func (mr *MockIdentityUserUseCaseMockRecorder) ChallengeVerify(ctx, sessionID, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChallengeVerify", reflect.TypeOf((*MockIdentityUserUseCase)(nil).ChallengeVerify), ctx, sessionID, code)
}

// ChallengeWithEmail mocks base method.
func (m *MockIdentityUserUseCase) ChallengeWithEmail(ctx context.Context, email string) (*dto.IdentityUserChallengeDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChallengeWithEmail", ctx, email)
	ret0, _ := ret[0].(*dto.IdentityUserChallengeDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// ChallengeWithEmail indicates an expected call of ChallengeWithEmail.
func (mr *MockIdentityUserUseCaseMockRecorder) ChallengeWithEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChallengeWithEmail", reflect.TypeOf((*MockIdentityUserUseCase)(nil).ChallengeWithEmail), ctx, email)
}

// ChallengeWithPhone mocks base method.
func (m *MockIdentityUserUseCase) ChallengeWithPhone(ctx context.Context, phone string) (*dto.IdentityUserChallengeDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChallengeWithPhone", ctx, phone)
	ret0, _ := ret[0].(*dto.IdentityUserChallengeDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// ChallengeWithPhone indicates an expected call of ChallengeWithPhone.
func (mr *MockIdentityUserUseCaseMockRecorder) ChallengeWithPhone(ctx, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChallengeWithPhone", reflect.TypeOf((*MockIdentityUserUseCase)(nil).ChallengeWithPhone), ctx, phone)
}

// LogIn mocks base method.
func (m *MockIdentityUserUseCase) LogIn(ctx context.Context, username, password string) (*dto.IdentityUserAuthDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogIn", ctx, username, password)
	ret0, _ := ret[0].(*dto.IdentityUserAuthDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// LogIn indicates an expected call of LogIn.
func (mr *MockIdentityUserUseCaseMockRecorder) LogIn(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIn", reflect.TypeOf((*MockIdentityUserUseCase)(nil).LogIn), ctx, username, password)
}

// LogOut mocks base method.
func (m *MockIdentityUserUseCase) LogOut(ctx context.Context) *dto.ErrorDTOResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOut", ctx)
	ret0, _ := ret[0].(*dto.ErrorDTOResponse)
	return ret0
}

// LogOut indicates an expected call of LogOut.
func (mr *MockIdentityUserUseCaseMockRecorder) LogOut(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockIdentityUserUseCase)(nil).LogOut), ctx)
}

// Profile mocks base method.
func (m *MockIdentityUserUseCase) Profile(ctx context.Context) (*dto.IdentityUserDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile", ctx)
	ret0, _ := ret[0].(*dto.IdentityUserDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// Profile indicates an expected call of Profile.
func (mr *MockIdentityUserUseCaseMockRecorder) Profile(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockIdentityUserUseCase)(nil).Profile), ctx)
}

// RefreshToken mocks base method.
func (m *MockIdentityUserUseCase) RefreshToken(ctx context.Context, accessToken, refreshToken string) (*dto.IdentityUserAuthDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, accessToken, refreshToken)
	ret0, _ := ret[0].(*dto.IdentityUserAuthDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockIdentityUserUseCaseMockRecorder) RefreshToken(ctx, accessToken, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockIdentityUserUseCase)(nil).RefreshToken), ctx, accessToken, refreshToken)
}

// Register mocks base method.
func (m *MockIdentityUserUseCase) Register(ctx context.Context, payload dto.IdentityUserRegisterDTO) (*dto.IdentityUserAuthDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, payload)
	ret0, _ := ret[0].(*dto.IdentityUserAuthDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIdentityUserUseCaseMockRecorder) Register(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIdentityUserUseCase)(nil).Register), ctx, payload)
}

// VerifyLogin mocks base method.
func (m *MockIdentityUserUseCase) VerifyLogin(ctx context.Context, flowID, code string) (*dto.IdentityUserAuthDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyLogin", ctx, flowID, code)
	ret0, _ := ret[0].(*dto.IdentityUserAuthDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// VerifyLogin indicates an expected call of VerifyLogin.
func (mr *MockIdentityUserUseCaseMockRecorder) VerifyLogin(ctx, flowID, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyLogin", reflect.TypeOf((*MockIdentityUserUseCase)(nil).VerifyLogin), ctx, flowID, code)
}

// VerifyRegister mocks base method.
func (m *MockIdentityUserUseCase) VerifyRegister(ctx context.Context, flowID, code string) (*dto.IdentityUserAuthDTO, *dto.ErrorDTOResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRegister", ctx, flowID, code)
	ret0, _ := ret[0].(*dto.IdentityUserAuthDTO)
	ret1, _ := ret[1].(*dto.ErrorDTOResponse)
	return ret0, ret1
}

// VerifyRegister indicates an expected call of VerifyRegister.
func (mr *MockIdentityUserUseCaseMockRecorder) VerifyRegister(ctx, flowID, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRegister", reflect.TypeOf((*MockIdentityUserUseCase)(nil).VerifyRegister), ctx, flowID, code)
}
